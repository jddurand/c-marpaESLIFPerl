name             = MarpaX-ESLIF
author           = Jean-Damien Durand <jeandamiendurand@free.fr>
license          = Perl_5
copyright_holder = Jean-Damien Durand
copyright_year   = 2017

; ---------------------------------------------------
; We use @Starter::Git with the following variations:
; ---------------------------------------------------

; Next version is provided by Git::NextVersion
; ---------------------------------------------------
[Git::NextVersion]
version_regexp = ^v?(\d+\.\d+)$

; "# VERSION" and "# AUTHORITY" annotations
; ---------------------------------------------------
[OurPkgVersion]
[Authority]
locate_comment = 1

; Pod are managed using Pod::Weaver::PluginBundle::RJBS
; ---------------------------------------------------
; - Because he knows how to insert Contributor section before Legal section
; - We add that explicitly to DevelopRequires because it seems it is not automatically discovered.
[Git::Contributors]
[PodWeaver]
config_plugin = @RJBS
[Prereqs / DevelopRequires ]
Pod::Weaver::PluginBundle::RJBS = 0

; Add authordeps as develop/requires
; ---------------------------------------------------
[Prereqs::AuthorDeps]

; Add xt tests
; ---------------------------------------------------
[Test::Perl::Critic]     ; xt/author/critic.t
[MetaTests]              ; xt/author/distmeta.t
; [Test::EOL]              ; xt/author/eol.t # yells on Windows when it should not IMHO
[Test::MinimumVersion]   ; xt/author/minimum-version.t
[MojibakeTests]          ; xt/author/mojibake.t
[Test::NoTabs]           ; xt/author/no-tabs.t
[Test::Pod::Coverage::Configurable] ; xt/author/pod-coverage.t
also_private = allocate             ; Defined in the XS
also_private = allocate_newFrom     ; Defined in the XS
also_private = meta_allocate        ; Defined in the XS
also_private = regex_allocate       ; Defined in the XS
also_private = string_allocate      ; Defined in the XS
also_private = dispose              ; Defined in the XS
also_private = constant             ; A bug IMHO
trustme = MarpaX::ESLIF::Grammar::Symbol::Properties => qr/^(?:new)$/ ; Used in the XS - completely internal
trustme = MarpaX::ESLIF::Grammar::Rule::Properties => qr/^(?:new)$/ ; Used in the XS - completely internal
[Test::Pod::LinkCheck]   ; xt/author/pod-linkcheck.t
[Test::Portability]      ; xt/author/portability.t
options = test_one_dot = 0
[Test::Synopsis]         ; xt/author/synopsis.t
[Test::Version]          ; xt/author/test-version.t
[Test::CPAN::Changes]    ; xt/release/cpan-changes.t
[Test::Kwalitee]         ; xt/release/kwalitee.t
skiptest = has_readme               ; It is normal we do not have README, metacpan tells everything that is needed.
[Test::CPAN::Meta::JSON] ; xt/release/meta-json.t

; Meta resources use [AutoMetaResources] convenient %{dist} to set homepage, [GitHub::Meta] for the rest
; ---------------------------------------------------
[AutoMetaResources]
homepage = https://metacpan.org/release/%{dist}
[GitHub::Meta]
homepage = 0

; Determine minimum perl version
; ---------------------------------------------------
[MinimumPerl]

; Find prereqs
; ------------
[AutoPrereqs]

; Some hardcoded prereqs because of MakeMaker::Awesome hooks (see below)
; ----------------------------------------------------------------------
[Prereqs / ConfigureRequires]
Config::AutoConf = 0
Cwd = 0
ExtUtils::CBuilder = 0.280224 ; 0.280224 is to make sure we have the support of $ENV{CXX}
ExtUtils::Constant = 0
File::chdir = 0
File::Path = 0
File::Spec = 0
File::Temp = 0
File::Which = 0
Perl::OSType = 0
Probe::Perl = 0
Try::Tiny = 0

[Prereqs / ConfigureSuggests]
; Well, ExtUtils::CppGuess does not install everywhere, in particular there is a problem with Sun C compiler.
; This is why we have an explicit copy in our inc that we enclose with a try/catch
ExtUtils::CppGuess = 0.26

[Prereqs / TestRequires]
Carp = 0
Data::Dumper = 0
Encode = 0
Log::Any::Adapter = 0
Log::Any = 0
Math::BigFloat = 0
Math::BigInt = 0
Pod::Coverage::TrustPod = 0
Safe::Isa = 0
Test::CPAN::Changes = 0
Test::CPAN::Meta = 0
Test::CPAN::Meta::JSON = 0
Test::Deep = 1.128
; Test::EOL = 0 # yells on Windows when it should not IMHO
Test::Kwalitee = 0
Test::MinimumVersion = 0
Test::Mojibake = 0
Test::More = 1.3
Test::More::UTF8 = 0
Test::NoTabs = 0
Test::Perl::Critic = 0
Test::Pod = 0
Test::Pod::Coverage = 0
Test::Pod::LinkCheck = 0
Test::Portability::Files = 0
Test::Synopsis = 0
Test::Version = 0
Try::Tiny = 0

; Generate a cpanfile
; ---------------------------------------------------
[CPANFile]

; Generate a Changes file
; ---------------------------------------------------
[ChangelogFromGit::CPAN::Changes]
file_name = Changes
group_by_author = 1 ; default 0
show_author_email = 1 ; default 0
tag_regexp  = ^v?(\d+\.\d+)$

; Gather tuning
; ---------------------------------------------------
[GatherFile]
filename = .perlcriticrc ; Explicitly add it for xtest
[GatherDir / SpecFiles]
root = etc/tarballs
prefix = etc/tarballs

; @Starter::Git Bundle with regeneration of:
; Makefile.PL
; META.json
; README.pod
; ---------------------------------------------------
[@Starter::Git]
revision = 5
-remove = Pod2Readme
Git::GatherDir.exclude_filename = LICENSE
Git::GatherDir.exclude_match = ^CMakeLists
Test::Compile.xt_mode = 0
PruneCruft.except[0] = ^\.perlcriticrc$
Git::Check.allow_dirty[0] = Changes
Git::Check.allow_dirty[1] = META.json
Git::Check.allow_dirty[2] = README.pod
Git::Check.allow_dirty[3] = Makefile.PL
Git::Check.allow_dirty[4] = cpanfile
Git::Check.untracked_files = warn ; For the case where generated files do not yet exist
regenerate = Changes
regenerate = META.json
regenerate = README.pod
regenerate = Makefile.PL
regenerate = cpanfile
installer = MakeMaker::Awesome
MakeMaker::Awesome.delimiter = |
MakeMaker::Awesome.header[  0] = |use Config;
MakeMaker::Awesome.header[  1] = |use ExtUtils::Constant qw /constant_types C_constant XS_constant autoload/;
MakeMaker::Awesome.header[  2] = |use File::Find;
MakeMaker::Awesome.header[  3] = |use File::Spec;
MakeMaker::Awesome.header[  4] = |use Probe::Perl;
MakeMaker::Awesome.header[  5] = |use Try::Tiny;
MakeMaker::Awesome.header[  6] = |
MakeMaker::Awesome.header[  7] = |autoflush STDOUT 1;
MakeMaker::Awesome.header[  8] = |autoflush STDERR 1;
MakeMaker::Awesome.header[  9] = |
MakeMaker::Awesome.header[ 10] = |#
MakeMaker::Awesome.header[ 11] = |# Generate constant types
MakeMaker::Awesome.header[ 12] = |#
MakeMaker::Awesome.header[ 13] = |my $fh;
MakeMaker::Awesome.header[ 14] = |open($fh, '>', 'c-constant-types.inc') || die "Cannot open c-constant-types.inc, $!";
MakeMaker::Awesome.header[ 15] = |print $fh constant_types();
MakeMaker::Awesome.header[ 16] = |close($fh) || warn "Failed to close c-constant-types.inc, $!";
MakeMaker::Awesome.header[ 17] = |my %types = ( 'event' => { pkg => 'MarpaX::ESLIF::Event::Type', constants => [qw/MARPAESLIF_EVENTTYPE_NONE MARPAESLIF_EVENTTYPE_COMPLETED MARPAESLIF_EVENTTYPE_NULLED MARPAESLIF_EVENTTYPE_PREDICTED MARPAESLIF_EVENTTYPE_BEFORE MARPAESLIF_EVENTTYPE_AFTER MARPAESLIF_EVENTTYPE_EXHAUSTED MARPAESLIF_EVENTTYPE_DISCARD/] }, 'value' => { pkg => 'MarpaX::ESLIF::Value::Type', constants => [qw/MARPAESLIF_VALUE_TYPE_UNDEF MARPAESLIF_VALUE_TYPE_CHAR MARPAESLIF_VALUE_TYPE_SHORT MARPAESLIF_VALUE_TYPE_INT MARPAESLIF_VALUE_TYPE_LONG MARPAESLIF_VALUE_TYPE_FLOAT MARPAESLIF_VALUE_TYPE_DOUBLE MARPAESLIF_VALUE_TYPE_PTR MARPAESLIF_VALUE_TYPE_ARRAY MARPAESLIF_VALUE_TYPE_BOOL MARPAESLIF_VALUE_TYPE_STRING MARPAESLIF_VALUE_TYPE_ROW MARPAESLIF_VALUE_TYPE_TABLE MARPAESLIF_VALUE_TYPE_LONG_DOUBLE/] }, 'loggerLevel' => { pkg => 'MarpaX::ESLIF::Logger::Level', constants => [qw/GENERICLOGGER_LOGLEVEL_TRACE GENERICLOGGER_LOGLEVEL_DEBUG GENERICLOGGER_LOGLEVEL_INFO GENERICLOGGER_LOGLEVEL_NOTICE GENERICLOGGER_LOGLEVEL_WARNING GENERICLOGGER_LOGLEVEL_ERROR GENERICLOGGER_LOGLEVEL_CRITICAL GENERICLOGGER_LOGLEVEL_ALERT GENERICLOGGER_LOGLEVEL_EMERGENCY/] }, 'rulePropertyBitSet' => { pkg => 'MarpaX::ESLIF::Rule::PropertyBitSet', constants => [qw/MARPAESLIF_RULE_IS_ACCESSIBLE MARPAESLIF_RULE_IS_NULLABLE MARPAESLIF_RULE_IS_NULLING MARPAESLIF_RULE_IS_LOOP MARPAESLIF_RULE_IS_PRODUCTIVE/] }, 'symbolPropertyBitSet' => { pkg => 'MarpaX::ESLIF::Symbol::PropertyBitSet', constants => [qw/MARPAESLIF_SYMBOL_IS_ACCESSIBLE MARPAESLIF_SYMBOL_IS_NULLABLE MARPAESLIF_SYMBOL_IS_NULLING MARPAESLIF_SYMBOL_IS_PRODUCTIVE MARPAESLIF_SYMBOL_IS_START MARPAESLIF_SYMBOL_IS_TERMINAL/] }, 'symbolEventBitSet' => { pkg => 'MarpaX::ESLIF::Symbol::EventBitSet', constants => [qw/MARPAESLIF_SYMBOL_EVENT_COMPLETION MARPAESLIF_SYMBOL_EVENT_NULLED MARPAESLIF_SYMBOL_EVENT_PREDICTION/] }, 'symbol' => { pkg => 'MarpaX::ESLIF::Symbol::Type', constants => [qw/MARPAESLIF_SYMBOLTYPE_TERMINAL MARPAESLIF_SYMBOLTYPE_META/] });
MakeMaker::Awesome.header[ 18] = |
MakeMaker::Awesome.header[ 19] = |foreach (sort keys %types) {
MakeMaker::Awesome.header[ 20] = |  my $pkg = $types{$_}->{pkg};
MakeMaker::Awesome.header[ 21] = |  print "Generating $pkg C $_ types\n";
MakeMaker::Awesome.header[ 22] = |  open($fh, '>', "c-$_-types.inc") || die "Cannot open c-$_-types.inc, $!";
MakeMaker::Awesome.header[ 23] = |  print $fh C_constant($pkg, "${_}_constant", undef, undef, undef, undef, @{$types{$_}->{constants}});
MakeMaker::Awesome.header[ 24] = |  close($fh) || warn "Failed to close c-$_-types.inc, $!";
MakeMaker::Awesome.header[ 25] = |  #
MakeMaker::Awesome.header[ 26] = |  # This is a bit vicious but in our case these are NOT macros but ENUMS !
MakeMaker::Awesome.header[ 27] = |  # We know what were are doing and replace all #ifdef MARPAESLIF_xxx and #ifdef GENERICLOGGER_xxx by #if 1
MakeMaker::Awesome.header[ 28] = |  #
MakeMaker::Awesome.header[ 29] = |  print "Tweaking $pkg C $_ types to work with enums\n";
MakeMaker::Awesome.header[ 30] = |  open($fh, '<', "c-$_-types.inc") || die "Failed to open c-$_-types.inc, $!";
MakeMaker::Awesome.header[ 31] = |  my $content = do { local $/; <$fh> };
MakeMaker::Awesome.header[ 32] = |  close($fh) || warn "Failed to close c-$_-types.inc, $!";
MakeMaker::Awesome.header[ 33] = |  $content =~ s/^#\s*ifdef\s+(?:MARPAESLIF_|GENERICLOGGER_).*?$/#if 1/smg;
MakeMaker::Awesome.header[ 34] = |  open($fh, '>', "c-$_-types.inc") || die "Failed to open c-$_-types.inc, $!";
MakeMaker::Awesome.header[ 35] = |  print $fh $content;
MakeMaker::Awesome.header[ 36] = |  close($fh) || warn "Failed to close c-$_-types.inc, $!";
MakeMaker::Awesome.header[ 37] = |
MakeMaker::Awesome.header[ 38] = |  print "Generating $pkg XS $_ types\n";
MakeMaker::Awesome.header[ 39] = |  open($fh, '>', "xs-$_-types.inc") || die "Cannot open xs-$_-types.inc, $!";
MakeMaker::Awesome.header[ 40] = |  print $fh XS_constant($pkg, 'IV', 'constant', "${_}_constant");
MakeMaker::Awesome.header[ 41] = |  close($fh) || warn "Failed to close xs-$_-types.inc, $!";
MakeMaker::Awesome.header[ 42] = |
MakeMaker::Awesome.header[ 43] = |  print "Generating $pkg AUTOLOAD\n";
MakeMaker::Awesome.header[ 44] = |  my $autoload = replace_autoload_tabs(autoload($pkg, '5.10', 1));
MakeMaker::Awesome.header[ 45] = |
MakeMaker::Awesome.header[ 46] = |  my @pkg = split(/::/, $pkg);
MakeMaker::Awesome.header[ 47] = |  $pkg[-1] .= '.pm';
MakeMaker::Awesome.header[ 48] = |  my $pkgfile = File::Spec->catfile('lib', @pkg);
MakeMaker::Awesome.header[ 49] = |  print "Pushing AUTOLOAD into $pkgfile\n";
MakeMaker::Awesome.header[ 50] = |  open($fh, '<', $pkgfile) || die "Failed to open $pkgfile, $!";
MakeMaker::Awesome.header[ 51] = |  $content = do { local $/; <$fh> };
MakeMaker::Awesome.header[ 52] = |  close($fh) || warn "Failed to close $pkgfile, $!";
MakeMaker::Awesome.header[ 53] = |  $content =~ s/^#\s*AUTOLOAD.*?$/\n$autoload\n/sm;
MakeMaker::Awesome.header[ 54] = |  open($fh, '>', $pkgfile) || die "Failed to open $pkgfile, $!";
MakeMaker::Awesome.header[ 55] = |  print $fh $content;
MakeMaker::Awesome.header[ 56] = |  close($fh) || warn "Failed to close $pkgfile, $!";
MakeMaker::Awesome.header[ 57] = |}
MakeMaker::Awesome.header[ 58] = |
MakeMaker::Awesome.header[ 59] = |#
MakeMaker::Awesome.header[ 60] = |# Build marpaESLIF
MakeMaker::Awesome.header[ 61] = |#
MakeMaker::Awesome.header[ 62] = |my $perl_exe = Probe::Perl->find_perl_interpreter();
MakeMaker::Awesome.header[ 63] = |my @args = ($perl_exe, File::Spec->catfile('etc', 'compile_marpaESLIF.pl'));
MakeMaker::Awesome.header[ 64] = |system(@args) == 0 || die "$!";
MakeMaker::Awesome.header[ 65] = |#
MakeMaker::Awesome.header[ 66] = |# Recuperate eventual OTHERLDFLAGS
MakeMaker::Awesome.header[ 67] = |#
MakeMaker::Awesome.header[ 68] = |my $otherldflags = 'OTHERLDFLAGS.txt';
MakeMaker::Awesome.header[ 69] = |my @OTHERLDFLAGS = ();
MakeMaker::Awesome.header[ 70] = |open(my $otherldflags_fd, '<', $otherldflags) || die "Cannot open $otherldflags, $!";
MakeMaker::Awesome.header[ 71] = |while (defined(my $line = <$otherldflags_fd>)) {
MakeMaker::Awesome.header[ 72] = |    $line =~ s/[\r\n]+//g;
MakeMaker::Awesome.header[ 73] = |    push(@OTHERLDFLAGS, $line);
MakeMaker::Awesome.header[ 74] = |}
MakeMaker::Awesome.header[ 75] = |close($otherldflags_fd) || warn "Cannot close $otherldflags, $!";
MakeMaker::Awesome.header[ 76] = |print "ESLIF compilation says \@OTHERLDFLAGS = @OTHERLDFLAGS\n";
MakeMaker::Awesome.header[ 77] = |#
MakeMaker::Awesome.header[ 78] = |# Recuperate eventual CFLAGS
MakeMaker::Awesome.header[ 79] = |#
MakeMaker::Awesome.header[ 80] = |my $cflags = 'CFLAGS.txt';
MakeMaker::Awesome.header[ 81] = |my $CFLAGS = '';
MakeMaker::Awesome.header[ 82] = |open(my $cflags_fd, '<', $cflags) || die "Cannot open $cflags, $!";
MakeMaker::Awesome.header[ 83] = |do { local $/; $CFLAGS = <$cflags_fd> };
MakeMaker::Awesome.header[ 84] = |$CFLAGS =~ s/[\r\n]+/ /g;
MakeMaker::Awesome.header[ 85] = |close($cflags_fd) || warn "Cannot close $cflags, $!";
MakeMaker::Awesome.header[ 86] = |print "ESLIF compilation says \$CFLAGS = $CFLAGS\n";
MakeMaker::Awesome.header[ 87] = |
MakeMaker::Awesome.header[ 88] = |my @ldfrom = ();
MakeMaker::Awesome.header[ 89] = |find({ wanted => sub { push(@ldfrom, $_) if (-f $_) }, no_chdir => 1 }, 'objs');
MakeMaker::Awesome.header[ 90] = |
MakeMaker::Awesome.header[ 91] = |sub replace_autoload_tabs {
MakeMaker::Awesome.header[ 92] = |    my ($autoload) = @_;
MakeMaker::Awesome.header[ 93] = |    $autoload =~ s/^\t/        /mg; # For the cases we know for pretty indentation
MakeMaker::Awesome.header[ 94] = |    $autoload =~ s/\t/    /g; # For all the other cases
MakeMaker::Awesome.header[ 95] = |    return $autoload;
MakeMaker::Awesome.header[ 96] = |}
MakeMaker::Awesome.header[ 97] = |
MakeMaker::Awesome.WriteMakefile_arg[0] = OBJECT => 'ESLIF$(OBJ_EXT)'
MakeMaker::Awesome.WriteMakefile_arg[1] = INC => join(' ', "-I" . File::Spec->catdir('extract', 'marpaESLIF', 'include'), "-I" . File::Spec->catdir('extract', 'genericLogger', 'include'), "-I" . File::Spec->catdir('extract', 'genericStack', 'include'))
MakeMaker::Awesome.WriteMakefile_arg[2] = LDFROM => join(' ', '$(OBJECT)', @ldfrom)
MakeMaker::Awesome.WriteMakefile_arg[3] = dynamic_lib => { OTHERLDFLAGS => join(' ', @OTHERLDFLAGS) }
MakeMaker::Awesome.WriteMakefile_arg[4] = CCFLAGS => "$Config::Config{ccflags} $CFLAGS"

; Do not require Thread on non-threaded perls
; ---------------------------------------------------
[DynamicPrereqs]
-delimiter = |
-raw = |use Config;
-raw = |if (! $Config{usethreads}) {
-raw = |  foreach (qw/PREREQ_PM BUILD_REQUIRES TEST_REQUIRES/) {
-raw = |    delete($WriteMakefileArgs{$_}{Thread}) if (exists($WriteMakefileArgs{$_}));
-raw = |    delete($FallbackPrereqs{$_}{Thread})   if (exists($FallbackPrereqs{$_}));
-raw = |  }
-raw = |}
